--[[
    Version: 2.0.0
    Last Update: 18 / 04 / 2025 | Day / Month / Year
]]--

--// Source
function obfuscate(source, VarName, WaterMark)
    warn("Started obfuscate")

    local Variable = VarName or "Taurus_"
    local WM

    if not source then
        source = [[print("Hello World!")]]
    end

    local ticks = tick()

    if typeof(WaterMark) == "string" and WaterMark ~= nil then
        WM = "    "..tostring(WaterMark).." | Secure by GhostyDuckyy#7698"
    else
        WM = "    ".."WaterMark".." | Secure by GhostyDuckyy#7698"
    end

    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    --// Random generator
    local random_ = function(length)
        local letters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
        local code = ""

        for i = 1, length do
            local char = letters[math.random(1, #letters)]
            code = code .. (math.random(1,2) == 1 and char or char:upper())
        end
        return code
    end

    --// XOR String Encryption
    local xor_encrypt = function(str, key)
        local encrypted = {}
        for i = 1, #str do
            local byte = string.byte(str:sub(i, i))
            table.insert(encrypted, bit32.bxor(byte, key))
        end
        return "{" .. table.concat(encrypted, ",") .. "}"
    end

    local xor_decrypt_func = [[
local function xor_decrypt(data, key)
    local result = {}
    for _, byte in ipairs(data) do
        table.insert(result, string.char(bit32.bxor(byte, key)))
    end
    return table.concat(result)
end
]]

    --// Binary filler
    local StringToBinary = function(String)
        local BinaryString = {}
        for _, Character in ipairs(String:split'') do
            local Binary = ""
            local Byte = Character:byte()
            while Byte > 0 do
                Binary = tostring(Byte % 2) .. Binary
                Byte = math.modf(Byte / 2)
            end
            table.insert(BinaryString, string.format("%.8d", Binary))
        end
        return table.concat(BinaryString, " ")
    end

    local add_binary = function(number, s)
        local topic = {
            "Deobfuscate?",
            "Touch some grass",
            "IronBrew Fork? Nope.",
            "PSU Fork? Nope.",
            "Hello World!",
            random_(math.random(50,150)),
        }

        for i = 1, number do
            local str = [[local ]]..Variable..random_(10)..[[ = "]]..StringToBinary(topic[math.random(1, #topic)])..[["; ]]
            s = s..str
        end
        return s
    end

    --// Garbage Code
    local inject_garbage = function()
        local t = {}
        for _ = 1, math.random(4, 8) do
            table.insert(t, "local "..Variable..random_(math.random(5, 10)).." = "..math.random(0, 10000))
        end
        return table.concat(t, "; ").."; "
    end

    --// Control Flow Flattening Example
    local flatten_control_flow = function()
        return [[
local __flow = {
    [1] = function() ]]..inject_garbage()..[[ return 2 end,
    [2] = function() ]]..inject_garbage()..[[ return 3 end,
    [3] = function() ]]..inject_garbage()..[[ return nil end
}
local __state = 1
while __state do
    __state = __flow[__state]()
end
]]
    end

    --// Function Wrapper
    local function_wrapper = function(inner_code)
        local func_name = Variable..random_(math.random(8, 12))
        return "local function "..func_name.."()\n"..inner_code.."\nend; "..func_name.."();"
    end

    --// Prepare Final Obfuscated Chunk
    local xor_key = math.random(5, 200)
    local encrypted_source = xor_encrypt(source, xor_key)
    local decrypt_runtime = "xor_decrypt("..encrypted_source..", "..xor_key..")"

    local loader_func = [[
local ]]..Variable..random_(12).." = loadstring("..decrypt_runtime.."); "..Variable..random_(12).."()"

    local filler_code = add_binary(math.random(15, 25), "")
    local flow_logic = flatten_control_flow()
    local garbage_code = inject_garbage()
    local wrapped = function_wrapper(loader_func)

    local final_code = WM..xor_decrypt_func.."\n"..filler_code.."\n"..garbage_code.."\n"..flow_logic.."\n"..wrapped

    setclipboard(final_code)
    warn("Done obfuscate in "..tostring(tick() - ticks).." second")
end

--// Module
return function(source, CustomVarName, WaterMark)
    task.spawn(function()
        obfuscate(source, CustomVarName, WaterMark)
    end)
end)
